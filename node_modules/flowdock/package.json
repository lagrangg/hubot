{
  "_args": [
    [
      {
        "raw": "flowdock@^0.9.1",
        "scope": null,
        "escapedName": "flowdock",
        "name": "flowdock",
        "rawSpec": "^0.9.1",
        "spec": ">=0.9.1 <0.10.0",
        "type": "range"
      },
      "/home/guillaume/Bender/node_modules/hubot-flowdock"
    ]
  ],
  "_from": "flowdock@>=0.9.1 <0.10.0",
  "_id": "flowdock@0.9.1",
  "_inCache": true,
  "_location": "/flowdock",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/flowdock-0.9.1.tgz_1491323120308_0.28581343148835003"
  },
  "_npmUser": {
    "name": "flowdock",
    "email": "team@flowdock.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flowdock@^0.9.1",
    "scope": null,
    "escapedName": "flowdock",
    "name": "flowdock",
    "rawSpec": "^0.9.1",
    "spec": ">=0.9.1 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/hubot-flowdock"
  ],
  "_resolved": "http://registry.npmjs.org/flowdock/-/flowdock-0.9.1.tgz",
  "_shasum": "47470c0dfc69a955374b6d644473e50fe763a678",
  "_shrinkwrap": null,
  "_spec": "flowdock@^0.9.1",
  "_where": "/home/guillaume/Bender/node_modules/hubot-flowdock",
  "author": {
    "name": "Ville Lautanala",
    "email": "lautis@gmail.com"
  },
  "bugs": {
    "url": "http://github.com/flowdock/node-flowdock"
  },
  "dependencies": {
    "buffer-indexof": "^1.0.0",
    "request": "~2.58.0"
  },
  "description": "Flowdock client library for node.js",
  "devDependencies": {
    "coffee-script": "~1.9.3",
    "mocha": "~2.2.5"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "47470c0dfc69a955374b6d644473e50fe763a678",
    "tarball": "https://registry.npmjs.org/flowdock/-/flowdock-0.9.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "682c77996e8bf2a35da2ac61b76161f3a15c32df",
  "homepage": "https://github.com/flowdock/node-flowdock#readme",
  "keywords": [
    "flowdock"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "index",
  "maintainers": [
    {
      "name": "lautis",
      "email": "lautis@gmail.com"
    },
    {
      "name": "flowdock",
      "email": "team@flowdock.com"
    }
  ],
  "name": "flowdock",
  "optionalDependencies": {},
  "readme": "# node-flowdock [![Build Status](https://secure.travis-ci.org/flowdock/node-flowdock.png?branch=master)](http://travis-ci.org/flowdock/node-flowdock)\n\nFlowdock Streaming client for node.js. Listen to messages from Flowdock in real-time and post new messages.\n\n## Installation\n\n    npm install flowdock\nor\n\n    # in package.json\n    \"dependencies\": {\n      \"flowdock\": \"latest\"\n    }\n\n## Example usage\n\n#### Error handling\n\nNote that `Flowdock.Session` will emit errors, and if unhandled they will crash your application. If you want to just handle errors in the callbacks, attach an empty error handler to the instance.\n\n```javascript\nvar session = new Session(...);\nsession.on('error', function () { /* noop */ });\n```\n\n#### Credentials\n\nThe library supports authenticating using both the [API token](http://www.flowdock.com/account/tokens) or a username and password.\n\n```\nvar Session = require('flowdock').Session;\n// For API token auth...\nvar s = new Session('deadbeefacdcabbacd')\n\n// ...or using email/password combination\nvar s = new Session('user@example.com', 'mypassword')\n```\n\n#### Flow IDs\n\nFlow IDs are strings and should be considered opaque identifiers. Some older flows still have an id that looks human readable, but you should not try to parse any information from it, since it might no longer be accurate. If you need to [create URLs](https://flowdock.com/api/rest#/url-breakdown), use `flow.parameterized_name` and `flow.organization.parameterized_name`.\n\n#### Opening and closing a stream\n```javascript\nvar Session = require('flowdock').Session;\n\nvar session = new Session(email, password);\nvar stream = session.stream('6f67fd0b-b764-4661-9e53-c38293d1e997');\nstream.end();\n```\nThe argument(s) for stream() can be a string (`'6f67fd0b-b764-4661-9e53-c38293d1e997'`) or an array (`['6f67fd0b-b764-4661-9e53-c38293d1e997', 'ba0a8850-bb05-42c4-a215-16bfece679e8']`).\n\nThe second parameter can be used to add parameters to the streaming URL, meaning you can subscribe to private messages, for example. See [Flowdock Streaming API documentation](https://www.flowdock.com/api/streaming) for more information about the available parameters.\n\n```javascript\nvar streamWithPrivates = session.stream('6f67fd0b-b764-4661-9e53-c38293d1e997', {user: 1, active: 'idle'});\n```\n\nsession.stream() returns an instance of EventEmitter. Currently it emits two types of events:\n\n* `error` is emitted with a response status code and an error message. This can happen when a connection can't be estabilished or you don't have access to one or more flows that you tried to stream.\n* `message` is emitted when the `stream` receives a JSON message.\n\n#### Listen to messages\n```javascript\nstream = session.stream(flowId);\nstream.on('message', function(message) {\n  // Do stuff with message\n  return stream.end();\n});\n```\nThe full message format specification for different message types is in [Flowdock API Message documentation](https://www.flowdock.com/api/messages).\n\n### Sending messages\n\nSession has several methods to send messages to Flowdock. All methods except `status` support adding tags to the messages. You can optionally supply a callback as the last parameter, with the signature `-> (err, message, res)`, where message is the created message and res is the raw response object.\n\n#### Post a chat message to a flow\n```javascript\nsession.message('6f67fd0b-b764-4661-9e53-c38293d1e997', 'Isn\\'t this cool?', ['tag1', 'tag2']);\n```\nThe first two arguments should be strings. The first argument is the flow ID and the second one is the message. The third argument is an optional array of tags. Sending a message is flow-specific.\n\n#### Post a comment to a flow\n```javascript\nsession.comment('6f67fd0b-b764-4661-9e53-c38293d1e997', 54321, 'I\\'m commenting through the api!', ['cool'])\n```\nThe first argument is the flow ID and the second is the ID of the message being commented. The rest of the arguments work the same as with `message`.\n\n#### Set your status for a flow\n```javascript\nsession.status('6f67fd0b-b764-4661-9e53-c38293d1e997', 'I just got the first message through the Flowdock streaming API.');\n```\nBoth arguments should be strings. The first argument is the flow ID and the second one is the status message. Setting a status is flow-specific.\n\n#### Post a chat message to a private chat\n```javascript\nsession.privateMessage(12345, 'Hi, this is a secret message!');\n```\nThe first argument is the recipient's ID and the second one is the message.\n\n#### Invite user to Flow\n```javascript\n// Note that flow and organization ids must be the \"parameterized_name\" from api response.\nsession.invite('my-flow', 'example-organization', 'email@example.com', 'Please join our flow!');\n```\nThe first argument is flow ID, the second one is the organization ID, the third one is the invitation recipient's email address and the fourth is the custom message that is sent with the invitation.\n\n#### Edit a message\n\nWhen editing a message, you need to specify the organization, flow and message id of the edited message. You can then change the content or tags by supplying them in the data hash.\n\n```javascript\nsession.editMessage(\n  'my-flow',\n  'example-organization',\n  12345,\n  {content: 'new content'},\n  function (err, message, response) {\n    /* do something */\n  }\n)\n```\n\n#### Fetch and stream all the flows your user has access to\n\n```javascript\nsession.flows(function(err, flows) {\n  var anotherStream, flowIds;\n  flowIds = flows.map(function(f) {\n    return f.id;\n  });\n  anotherStream = session.stream(flowIds);\n  return anotherStream.on('message', function(msg) {\n    console.log('message from stream:', msg);\n    // variable 'msg' being something like:\n    // {\n    //   event: 'activity.user',\n    //   flow: '6f67fd0b-b764-4661-9e53-c38293d1e997',\n    //   content: { last_activity: 1329310503807 },\n    //   user: '12345',\n    //   .. plus few other fields\n    // }\n  });\n});\n```\nThe full message format specification for different message types is in the [Flowdock API Message documentation](https://www.flowdock.com/api/messages).\n\n## API usage\n\nThe Session object can be used as an API wrapper. It provides the basic HTTP request functions (GET, POST, PUT, DELETE). All functions accept the same parameters: `path`, `data` and `callback`. For example, fetching a single flow by ID:\n\n```javascript\nsession.get(\n  '/flows/find',\n  {id: '6f67fd0b-b764-4661-9e53-c38293d1e997'},\n  function (err, flow, response) {\n    /* do something */\n  }\n);\n```\n\nOr delete a message:\n\n```javascript\npath = flow.url + \"/messages/\" + message.id;\nsession.delete(path, function (err) {\n  /* do something */\n});\n```\n\n## Development\n\nRun `npm install`. Code can be compiled to .js with command `make build`.\n\n## Changes\n\n- v. 0.9.1 - Removed buffertools dependency and now uses event.EventEmitter instead of process.EventEmitter. (Thanks @valeriangalliat)\n- v. 0.9.0 - Updated dependencies to newest versions and added api wrappers (get, post, put, delete). Node 0.6 is no longer supported.\n- v. 0.8.2 - Newer buffertools to support node 0.11\n- v. 0.8.1 - Errors are error objects instead of strings. Flows callback also receives error as first argument.\n- v. 0.8.0 - Message callbacks conform to node standard with -> (err, body, res) signature\n\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/flowdock/node-flowdock.git"
  },
  "scripts": {
    "prepublish": "make build",
    "test": "make test"
  },
  "version": "0.9.1"
}
